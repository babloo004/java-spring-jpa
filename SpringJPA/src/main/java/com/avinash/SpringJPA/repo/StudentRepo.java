package com.avinash.SpringJPA.repo;

import com.avinash.SpringJPA.model.Student;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

//let me explain how the JPA helps us
//to work with JPA 1st we need to create an interface and later we must extend the JpaRepository<> interface
//JpaRepository<> accepts two wrapper classes into it
//we must specify the model class as 1st and we must pass the primary key type wrapper class
//suppose our model is student and primary key is of Integer type(roll)
//hence we must write like this "JpaRepository<Student,Integer>"

//inside the Repository we will define methods
//we will use Domain Specific Language(DSL)
//later they are converted into the JPQL (Java Persistence Query Language)
//later the JPQL query will be converted into the suitable database manager query
//later the query will be executed by the EntityManager
//the result will be mapped to the Entity

//by default SpringJPA provides some basic CRUD operation methods like save(), delete() etc
//there is no need to define them in our repository
//if you want to define ur own methods you can define in DSL
//or you can define query in JPQL by an Annotation @Query above method
//JPQL means we will use Class name(Entity) instead of table name in query

//even if you don't want to create a table by your selves in database
//We can do that by java by configuring the "application.properties" file in resources
//spring.jpa.hibernate.ddl-auto=update , this configuration will create a table if don't exists, if it exists it will update the table
//spring.jpa.show-sql=true , this configuration will show us the query generated by the hibernate
@Repository
public interface StudentRepo extends JpaRepository<Student,Integer> {

    //defining our method in DSL
    public List<Student> findByfname(String fname);
    //findBymarks
    public List<Student> findBymarks(int marks);

}
